[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "malign"
dynamic = ["version"]
description = "Library for multiple asymmetric alignments on different alphabets"
readme = "README.md"
license = {text = "MIT"}
keywords = ["alignment", "sequence alignment", "multiple alphabet", "linguistics", "asymmetric"]
authors = [
    {name = "Tiago Tresoldi", email = "tiago.tresoldi@lingfil.uu.se"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries",
    "Topic :: Text Processing :: Linguistic",
    "Typing :: Typed",
]
requires-python = ">=3.10"
dependencies = [
    "networkx>=2.5",
    "numpy>=1.20.0",
    "scipy>=1.7.0",  # For matrix learning optimization (Phase 2)
    "scikit-learn>=0.24.0",  # sklearn package
    "tabulate>=0.8.0",
    "PyYAML>=5.4.0",  # For YAML matrix serialization (Phase 2)
]

[project.optional-dependencies]
# Development dependencies (required for Phase 1+)
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "hypothesis>=6.0.0",

    # Code quality
    "ruff>=0.1.0",
    "mypy>=1.5.0",

    # Build and release
    "build>=0.10.0",
    "twine>=4.0.0",

    # Documentation (nhandu for tutorials)
    "nhandu>=0.1.0",
]

# Integration with external libraries (Phase 2)
integrations = [
    "freqprob>=0.1.0",
    "asymcat>=0.1.0",
]

# All optional dependencies
all = [
    "malign[dev,integrations]",
]

[project.urls]
Homepage = "https://github.com/tresoldi/malign"
Documentation = "https://github.com/tresoldi/malign/blob/main/docs/USER_GUIDE.md"
Repository = "https://github.com/tresoldi/malign.git"
Issues = "https://github.com/tresoldi/malign/issues"
Changelog = "https://github.com/tresoldi/malign/blob/main/CHANGELOG.md"

[tool.setuptools.dynamic]
version = {attr = "malign.__version__"}

[tool.setuptools.packages.find]
where = ["."]
include = ["malign*"]

[tool.setuptools.package-data]
malign = ["py.typed"]

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py310"
extend-exclude = [
    "__pycache__", ".git", ".mypy_cache", ".pytest_cache",
    ".ruff_cache", ".venv", "venv", "build", "dist",
]

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade
    "ARG",   # flake8-unused-arguments
    "SIM",   # flake8-simplify
    "ICN",   # flake8-import-conventions
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "TID",   # flake8-tidy-imports
    "TCH",   # flake8-type-checking
    "RUF",   # Ruff-specific rules
    "D",     # pydocstyle
]

ignore = [
    "E501",   # Line too long (ruff format handles this)
    "B008",   # Do not perform function calls in argument defaults
    "RET504", # Unnecessary variable assignment before return
    "ARG002", # Unused method argument (common in abstract methods)
    "D202",   # No blank lines allowed after function docstring
    "D200",   # One-line docstring should fit on one line
    "D107",   # Missing docstring in __init__
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "ARG001", "ARG002",  # Unused arguments in tests
    "S101",              # Use of assert detected
    "D100", "D103",      # Missing docstrings in tests
]
"scripts/*.py" = [
    "T201",              # Allow print statements
]
"docs/tutorial_*.py" = [
    "D100",   # Missing module docstring (self-documenting)
    "E402",   # Module import not at top (pedagogical)
    "T201",   # Allow print statements
]

[tool.ruff.lint.pydocstyle]
convention = "google"

# MyPy configuration (relaxed initially, per Q6 answer)
[tool.mypy]
python_version = "3.10"
warn_return_any = false  # Relaxed
warn_unused_configs = true
disallow_untyped_defs = false  # Relaxed - will tighten in Phase 1.7
disallow_incomplete_defs = false  # Relaxed
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false  # Relaxed initially
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = ["networkx.*", "numpy.*", "sklearn.*", "tabulate.*", "pytest.*", "hypothesis.*", "yaml.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disable_error_code = ["misc", "no-untyped-def"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "regression: marks tests that validate against gold-standard data",
    "property: marks property-based tests using Hypothesis",
    "benchmark: marks performance benchmark tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["malign"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
show_missing = true
precision = 2
# Start with current coverage, will increase to 90 in Phase 3
# fail_under = 90  # Commented out for now

[tool.coverage.html]
directory = "tests/htmlcov"

[tool.coverage.xml]
output = "coverage.xml"
